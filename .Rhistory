x <- 1:20
x
0/0
1L
1L/2
c(0.5,0.6)
c(TRUE, 0.5)
c(TRUE, FALSE)
c(0.1,TRUE,FALSE)
c(0.9,"a")
c(TRUE,"a")
m<-1:10
m
dim(m)<-c(2,5)
m
x<-1:3
y<-10:12
cbind(x,y)
x<-factor(c("yes","yes","no"), levels = c("yes","no")
)
x
con<-url("http://www.jhsph.edu","r")
x<-readLines(con)
head(x)
x
x<-c("a","b","c","d","a")
x[1]
rm(x)
x<-c("a","b","c","d","a")
x<-c("a","b","c","d","a")
x<- matrix(1:6, 2, 3)
str(apply)
x<-matrix(rnorm(200),20,20)
x
apply(x,2,mean)
x
str(applu)
str(apply)
?apply
?quantile
apply(x, quantile, probs = c(0.25,0.75))
apply(x, 1, quantile, probs = c(0.25,0.75))
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
s
library(datasets)
data("iris")
?iris
levels(iris)
View(iris)
sapply(iris,mean,iris$Sepal.Length)
tapply(iris$Sepal.Length,mean,iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
rowMeans(iris(,1:4))
rowMeans(iris[,1:4])
x<-rowMeans(iris[,1:4])
x<-apply(iris[,1:4],2,mean)
x
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
levels(mtcars$cyl)
mtcars$cyl
tapply(mtcars$hp,mtcars$cyl,mean)
x<-tapply(mtcars$hp,mtcars$cyl,mean)
x$8-x$4
x[,"8"]-x[,"4"]
x[,3]-x[,1]
?x
x
x$4
summary(x)
describe(x)
factors(x)
factor(x)
type(x)
class(x)
x[1]
x[1]-x[3]
x
debug(ls)
ls
ls(x)
cc <- c("character", "character", "numeric", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL")
data <- read.csv("../household_power_consumption.txt", sep=";", skip=66637, nrows=2880, header = FALSE, colClasses = cc)
names(data) <- names(read.csv("../household_power_consumption.txt", sep=";", nrows=1, header=TRUE, colClasses = cc))
data$ts <- strptime(paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
png(filename="plot2.png")
plot(data$ts, data$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="")
dev.off()
DT<-fread("household_power_consumption.txt")
DT<- subset(DT, Date %in% c("1/2/2007", "2/2/2007"))
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5", "foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale")<-"liter"
h5ls("example.h5")
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out=5), c("ab","cde","fghi","a","s"), stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5", "foo/A")
h5write(c(12,13,14),"example.h5", "foo/A", index = list(1:3,1))
h5ls("example.h5")
h5read("example.h5", "foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCode
library(XML)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I60AAAA&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSAplly(html "//title", xmlValue)
xpathSAplly(html, "//title", xmlValue)
url <- "http://scholar.google.com/citations?user=HI-I60AAAA&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
#readLines()
xpathSAplly(html, "//title", xmlValue)
library(httr); html2=Get(url)
library(httr); html2=GET(url)
library(httr); html2=GET(url)
content2=content(html2,as="text")
parsedHtml = htmlParse(content2,asText=T)
xpathSApply(parsedHtml,"//title", xmlValue)
pg2= GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg2
names(pg2)
pg1 = GET(handle=google,path="/")
google = handle("http://google.com")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "24c21d812d32cfb266a8",
secret = "08a12113efdfc46b1a03305878842162829cc96d")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
oauth_endpoint("github")
myapp <- oauth_app("github",
key = "24c21d812d32cfb266a8",
secret = "08a12113efdfc46b1a03305878842162829cc96d")
github_token <- oauth2.0_token(oauth_endpoint("github"), myapp)
install.packages(httpuv)
install.packages("httpuv")
library(httpuv)
library(httr)
oauth_endpoint("github")
oauth_endpoints("github")
oauth_endpoint("github")
myapp <- oauth_app("github",
key = "24c21d812d32cfb266a8",
secret = "08a12113efdfc46b1a03305878842162829cc96d")
github_token <- oauth2.0_token(oauth_endpoint("github"), myapp)
install.packages("jsonlite")
oauth_endpoint("github")
oauth_endpoints("github")
oauth_endpoints("github")
library(httr)
install.packages(httr)
install.packages("httr")
install.packages("httr")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
httr
library(httr)
myapp <- oauth_app("github",
key = "24c21d812d32cfb266a8",
secret = "08a12113efdfc46b1a03305878842162829cc96d")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoint("github"), myapp)
myapp <- oauth_app("github",
key = "24c21d812d32cfb266a8",
secret = "08a12113efdfc46b1a03305878842162829cc96d")
github_token <- oauth2.0_token(oauth_endpoint("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoint("github"), authorize= myapp)
library(httr)
library(httpuv)
library(jsonlite)
library(Rook)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
myapp <- oauth_app("github", key= "24c21d812d32cfb266a8", secret="08a12113efdfc46b1a03305878842162829cc96d")
github_token <- oauth2.0_token(github, myapp, cache=FALSE)
github_token <- oauth2.0_token(github, myapp)
thub <- oauth_endpoint(NULL, "authorize", "access_token",
base_url = "https://github.com/login/oauth")
github_token <- oauth2.0_token(github, myapp)
github <- oauth_endpoint(NULL, "authorize", "access_token",
base_url = "https://github.com/login/oauth")
github_token <- oauth2.0_token(github, myapp)
req <- GET("https://api.github.com/users/jtleek/repos")
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
req2<-content(req)
json1<-jsonlite::fromJSON(toJSON(req2))
json1
library(httr)
library(httpuv)
library(jsonlite)
library(Rook)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
req2<-content(req)
json1<-jsonlite::fromJSON(toJSON(req2))
req
str(req)
req$times
req <- GET("https://api.github.com/users/jtleek/repos")
req2<-content(req)
json1<-jsonlite::fromJSON(toJSON(req2))
json1$name
req <- GET("https://api.github.com/users/jtleek/repos",github_token)
github_token <- oauth2.0_token(github, myapp)
req <- GET("https://api.github.com/users/jtleek/repos")
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
x<-xplot(Ozone~Wind,data=airquality)
x<-xyplot(Ozone~Wind,data=airquality)
class(x)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
library(datasets)
data(airquality)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(displ,hwy,data=mpg)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(ggplot2)
ggplot(movies, aes(votes, rating))
str(movies)
getdata.data.ss06hid <- read.csv("~/Documents/R files/data/getdata-data-ss06hid.csv")
View(getdata.data.ss06hid)
getdata.data.ss06hid <- read.csv("~/Documents/R files/data/getdata-data-ss06hid.csv")
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(plyr)
install.packages("dplyr")
library(plyr)
install.packages("dplyr")
